mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.1, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.distB <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.distB)
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.1, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.distB <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.distB)
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeys, file = 'monkeysA.csv', row.names = FALSE)
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeys, file = 'monkeysA.csv', row.names = FALSE)
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.1, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeys, file = 'monkeysA.csv', row.names = FALSE)
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.2, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeys, file = 'monkeysA.csv', row.names = FALSE)
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.25, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeys, file = 'monkeysA.csv', row.names = FALSE)
gf_boxplot(embrace_diff ~ community, data=monkeysB) %>%
gf_jitter(embrace_diff ~ community, color = ~community, width=0.2)
gf_boxplot(embrace_diff ~ community, data=monkeysA) %>%
gf_jitter(embrace_diff ~ community, color = ~community, width=0.2)
x = seq(from=0, by = 0.001, to=1); y = 5/4 - x^3
gf_point(y~x)
require(mosaic)
gf_point(y~x)
gf_point(y~x) %>% gf_lims(y=c(0,1.5))
x = seq(from=-1, by = 0.001, to=1); y = 5/4 - x^3
x = seq(from=0, by = 0.001, to=1); y = 1-x^2
gf_point(y~x) %>% gf_lims(y=c(0,1.5))
x = seq(from=-1, by = 0.001, to=1); y = 1-x^2
gf_point(y~x) %>% gf_lims(y=c(0,1.5))
require(mosaic)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw(base_size = 18))
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
knitr::kable(pigeons)
pigeons <- pigeons %>% select(Unirate, OwnerName, PigeonID, Color, Sex)
knitr::kable(pigeons)
gf_histogram(~Unirate, data=pigeons)
gf_histogram(~Unirate, data=pigeons, bins=3)
favstats(~Unirate, data=pigeons)
gf_dist(dist='gamma', shape = 0.15, scale=2)
gf_dist(dist='gamma', shape = 1, scale=2)
gf_dist(dist='gamma', shape = 2, scale=2)
gf_dist(dist='gamma', shape = 2, scale=0.3)
gf_dist(dist='gamma', shape = 2, scale=1.5)
gf_histogram(~Unirate, data=pigeons, bins=3)
gf_histogram(~Unirate, data=pigeons, bins=3)
gf_dist(dist='gamma', shape = 2, scale=1.5)
gf_dist(dist='norm', params = list(mean=5, sd = 2.5), title='Normal')
gf_dist(dist='exp', params = list(rate = 0.25), title='Exponential')
gf_dist(dist='gamma', params = list(shape=2, rate=1.5), title='Gamma')
require(mosaic)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
theme_set(theme_bw(base_size = 14))
pigeons <- read.csv('http://www.calvin.edu/~sld33/data/pigeons.csv')
pigeons <- pigeons %>%
mutate(norm_likelihood = dnorm(Unirate, params = list(mean = 5, sd = 2.5)))
pigeons <- pigeons %>%
mutate(norm_likelihood = dnorm(Unirate, mean = 5, sd = 2.5))
pigeons
?prod
prod(~norm_likelihood, data=pigeons)
?favstats
summ <- favstats(~Unirate, data=pigeons)
knitr::kable(summ)
xtable::xtable(pigeons)
?xtable::xtable
fitdistr(~Unirate, data=pigeons)
?fitdistr
mosaic::fitdistr()
fitdistr(pigeons$Unirate)
fitdistr(pigeons$Unirate, dist='norm')
fitdistr(pigeons$Unirate, densfun='norm')
fitdistr(pigeons$Unirate, densfun='normal')
fitdistr(pigeons$Unirate, densfun='gamma')
fitdistr(pigeons$Unirate, densfun='exp')
fitdistr(pigeons$Unirate, densfun='exponential')
gf_histogram(~Unirate, data=pigeons) %>%
gf_fitdistr(dist='norm') %>%
gf_dist(dist='gamma', shape=5.2, rate = 1.1)
gf_dhistogram(~Unirate, data=pigeons) %>%
gf_fitdistr(dist='gamma') %>%
gf_dist(dist='gamma', shape=5, rate = 1)
gf_dhistogram(~Unirate, data=pigeons, bins=3) %>%
gf_fitdistr(dist='gamma') %>%
gf_dist(dist='gamma', shape=5, rate = 1)
gf_dhistogram(~Unirate, data=pigeons, bins=3) %>%
gf_fitdistr(dist='norm') %>%
gf_fitdistr(dist='exp') %>%
gf_fitdistr(dist='gamma') %>%
?gf_fitdistr
oldfaith
faithful
names(faithful)
require(mosaic)
require(xtable)
options(xtable.comment = FALSE)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
theme_set(theme_bw(base_size = 14))
gf_dhistogram(~eruptions, data=faithful)
?faithful
?fitdistr
?MASS::fitdistr
knitr::opts_chunk$set(echo = TRUE)
water <- read.csv('http://www.calvin.edu/~sld33/data/FlintWater.csv')
water <- read.csv('http://www.calvin.edu/~sld33/data/FlintWaterTestJanMar2016.csv')
require(mosaic)
fitdistr(water$Copper, densfun = 'exponential')
exp.fit <- fitdistr(water$Copper, densfun = 'exponential')
str(exp.fit)
exp.fit$estimate
gf_dhistogram(~Copper, data=water) %>%
gf_fitdistr(dist='exp')
setwd("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/STAT241/Spring2019/Homework")
knit('HW4-Solutions.Rnw')
knit('HW4-Solutions.Rnw')
knit('HW4-Solutions.Rnw')
knit('HW4-Solutions.Rnw')
install.packages("formatR")
install.packages("formatR")
knit('HW4-Solutions.Rnw')
knit('HW4-Solutions.Rnw')
setwd("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/STAT145/Spring2019/Tests")
knit('Test1ReviewSheet.Rnw')
setwd("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/STAT243/Spring2019/Tests")
knit('Test1ReviewSheet.Rnw')
?dplyr::summarise
?left_join
knitr::opts_chunk$set(echo = TRUE)
require(mosaic)
theme_set(theme_bw(base_size=20))
gf_histogram(~embrace_diff | community, data=monkeys, bins=4)
?rflip
knitr::opts_chunk$set(echo = TRUE)
require(mosaic)
theme_set(theme_bw(base_size=20))
#set.seed(18)
set.seed(22)
my.rgamma <- function(n, mean, sd){
result <- c(rgamma(n, shape=mean^2/(sd)^2, scale = (sd)^2/mean))
return(result)
}
# fake up data based on reported CI
SE = 0.25*(1.27-0.5)+0.02
meandiff = 0.5*(1.27-0.5) + 0.42
monkeysA <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = my.rgamma(n=15, mean = meandiff, sd = SE*sqrt(15)),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
#boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeys))
#cdata(~mean, data=boot.dist)
monkeysB <- data.frame(ID = c(1:15)) %>%
mutate(embrace_diff = rnorm(n=15, mean = meandiff+0.25, sd = SE*sqrt(15)-0.05),
community = rbinom(n=15, size=1, prob = 2/3),
community = ifelse(community, 'Western', 'Eastern'))
boot.dist <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=boot.dist)
write.csv(monkeysA, file = 'monkeysA.csv', row.names = FALSE)
write.csv(monkeysB, file = 'monkeysB.csv', row.names = FALSE)
nrow(monkeysA)
names(monkeysA)
# or:
tally(~community, data=monkeysA, format = 'prop')
pW
pW <- prop(~community == 'Western', data=monkeysA)
rb <- do(1000)*rflip(n = nrow(monkeysA), prob=pW)
gf_histogram(~prop, data=rb)
gf_histogram(~prop, data=rb, binwidth=0.05)
gf_histogram(~prop, data=rb, binwidth=0.1)
1/15
gf_histogram(~prop, data=rb, binwidth=0.0.07)
gf_histogram(~prop, data=rb, binwidth=0.07)
# probably do not use 2SE method because not convincingly symmetric
wCI <- cdata(~prop, data=rb, p=0.95)
#or
gf_boxplot(embrace_diff ~ NULL, data=monkeysA)
#or
gf_boxplot(embrace_diff ~ 0, data=monkeysA)
#or
gf_boxplot(embrace_diff ~ 0, data=monkeysA) %>%
gf_labs(x = '')
#or
gf_boxplot(embrace_diff ~ 0, data=monkeysA) %>%
gf_labs(x = '') %>%
gf_refine(axis.ticks.x = element_blank())
#or
gf_boxplot(embrace_diff ~ 0, data=monkeysA) %>%
gf_labs(x = '') %>%
gf_theme(axis.ticks.x = element_blank())
#or
gf_boxplot(embrace_diff ~ 0, data=monkeysA) %>%
gf_labs(x = '') %>%
gf_theme(axis.text.x = element_blank())
gf_histogram(~embrace_diff, data=monkeysA) %>%
gf_labs(x='Difference in Mean Number Embraces\nAfter - Before Fusion')
gf_histogram(~embrace_diff, data=monkeysA, bins=4) %>%
gf_labs(y='Count',
x='Difference in Mean Number Embraces\nAfter - Before Fusion')
ed <- mean(~embrace_diff, data=monkeysA)
ed <- mean(~embrace_diff, data=monkeysA)
eb <- do(1000)*mean(~embrace_diff, data=resample(monkeysA))
gf_histogram(~mean, data=eb)
gf_histogram(~mean, data=eb, bins = 20)
cdata(~mean, data=eb)
eb2 <- do(1000)*mean(~embrace_diff, data=resample(monkeysA))
cdata(~mean, data=eb2)
eb3 <- do(1000)*mean(~embrace_diff, data=resample(monkeysA))
cdata(~mean, data=eb3)
eb3 <- do(1000)*mean(~embrace_diff, data=resample(monkeysB))
cdata(~mean, data=eb3)
dist.boot <- runif(1000, min=1.6365, max=1.6375)
u_d <- sd(~dist.boot)
require(mosaic)
u_d <- sd(~dist.boot)
u_d
time.boot <- do(1000)*mean(~times, data=resample(falls))
# load packages that are going to be used
require(mosaic)      # this loads ggformula, etc. too
require(Lock5withR)  # this loads data sets from our book
# Some customization. You can alter or delete as desired (if you know what you are doing).
theme_set(theme_bw())     # change theme for ggplot2/ggformula
knitr::opts_chunk$set(
tidy = FALSE,     # display code as typed (rather than reformatted)
size = "small")   # slightly smaller font for code
hw <- data.frame(Problem=c('5.1','5.2', '5.4', '5.5','Extra problem',
'TOTAL'),
Points = c('6', '4',
'8', '6', '10', '34'),
Comments=c('Use the delta method. See Section 5.4 for more examples.',
'See section 5.3.2 for good practice guidelines (we did not take time to discuss this in detail in class)',
'Delta method again. See Section 5.4 for more examples.',
'Delta method again. See Section 5.4 for more examples.',
'See below; use RStudio to solve.', ''))
pander::set.alignment('left')
pander::panderOptions("table.style", "grid")
pander::pander(hw)
falls <- read.csv('http://www.calvin.edu/~sld33/data/falls.csv')
dist.boot <- runif(1000, min=1.6365, max=1.6375)
u_d <- sd(~dist.boot)
u_d
time.boot <- do(1000)*mean(~times, data=resample(falls))
head(time.boot)
u_t <- sd(~mean, data=time.boot)
u_t
mean(~times, data=falls)
time.boot <- time.boot %>%
mutate(dist = dist.boot)
time.boot <- time.boot %>%
mutate(speed = dist/mean)
head(time.boot)
head(time.boot)
1.637/0.3916577
u_s <- sd(~speed, data=time.boot)
u_s
round(u_d, digits=4)
?round
signif(u_d, digits=1)
sol <- data.frame(values = c(5.43, 1536, 576, 0.00149),
uncer = c(0.02, 13,3,0.00003))
knitr::kable(sol)
kable
?kable
?pander
pander(sol)
pander::pander(sol)
sol <- data.frame(estimate = c(5.43, 1536, 576, 0.00149),
uncertainty = c(0.02, 13,3,0.00003))
pander::pander(sol)
(0.8*311.6e6*12000)/23.7
p=3.11e6
c=0.8
e=23.7
d=12000
(^2p*d/e)
(p*d/e)^2
0.12^@
0.12^2
(c*d/e)^2
(0.2e6)^2
(c*p/e)^2
2000^2
(-c*p*d/e^2)^2
1.7^2
sqrt(2.48e18*0.0144 + 164076*4e10 + 11e10*4e6 + 2.83e15*2.89)
g = 126217721519
f
g
round(g,5)
round(g,0)
round(g,-2)
g/10e8
1262e8
1262e8
setwd("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/STAT241/Engineering-Statistics")
knit('Prob5p5.Rnw')
knit('Prob5p5.Rnw')
knit('Prob5p5.Rnw')
knit('Prob5p5.Rnw')
library(readr)
Names <- read_csv("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/STAT243/Spring2019/Admin/Names.csv")
View(Names)
Names <- Names %>% mutate(name = paste(`First name`, `Last name`))
require(tidyverse)
require(mosaic)
Names <- Names %>% mutate(name = paste(`First name`, `Last name`))
shuffle(Names$name)
shuffle(Names$name)
bd <- do(1000)*rflip(n=43, prob=0.475)
rd <- do(1000)*rflip(n=43, prob=0.5)
sd(~prop, data=bd)
sd(~prop, data=rd)
whale <- read.csv('http://www.calvin.edu/~sld33/data/HaDiveParameters.csv') %>%
rename(Depth = Dive.Depth..m.) %>%
mutate(Depth = round(Depth/10)*10)
names(whale)
gf_dhistogram(~Wiggliness, data=whale, ylab='Density', binwidth=30)
gf_dhistogram(~Wiggliness, data=whale, ylab='Density')
gf_dhistogram(~Wiggliness, data=whale, ylab='Density', bins=10)
gf_dhistogram(~Wiggliness, data=whale, ylab='Density', bins=10)
st <- favstats(~Wiggliness, data=whale) %>%
rename(`me____` = median,
`me____` = mean)
kable(st)
gf_bar(~Wiggliness, data=whale, title='Plot A')
gf_histogram(~Wiggliness, data=whale, bins=50, title='Plot B')
gf_bar(~Wiggliness, data=whale, title='Plot A')
whale <- read.csv('http://www.calvin.edu/~sld33/data/HaDiveParameters.csv') %>%
rename(Depth = Dive.Depth..m.) %>%
mutate(Depth = round(Depth/10)*10) %>%
mutate(Wiggliness = round(Wiggliness/100)*100)
knit('STAT241-S19.Rnw')
install.packages("Stat2Data")
require(Stat2Data)
names(weightlossincentive)
require(Stat2Data)
WeightLoss
?WeightLoss
require(Stat2Data)
data(package='Stat2Data')
WeightLossIncentive
data("WeightLossIncentive")
head(WeightLossIncentive)
gf_boxplot( ~WeightLoss, data=Controls)
require(Stat2Data)
data("WeightLossIncentive")
Controls <- WeightLossIncentive %>%
filter(Group == 'Control')
favstats( ~ WeightLoss, data=Controls )
gf_boxplot( ~WeightLoss, data=Controls)
x <- seq(from=-5, by=0.01, to=5)
dtvals <- dt(x, df=18)
par(lwd=2.5, cex=1.25, cex.lab=1.25, cex.axis=1.25, cex.main=1.25)
plot(x,dtvals, type="l", xlab="Test Statistic T", ylab="Probability Density", lwd=2.5)
points(x=c(-t,t), y=dt(c(-t,t),df=18), pch=19, cex=1.5)
text(x=c(-t,t)+ c(-0.2, 0.2), y=dt(c(-t,t),df=18)+0.04, labels=c("-t", "t"), cex=1.27)
lines(x=c(-t,-t), y=c(0,dt(-t,df=18) ), lwd=3)
lines(x=c(t,t), y=c(0,dt(t,df=18) ), lwd=3)
xspots <- seq(from=t, by=0.025, to=5)
for (k in 1:length(xspots)){
lines(x=c(-xspots[k], -xspots[k]), y=c(0,dt(-xspots[k],df=18) ), lwd=1, lty=3)
lines(x=c(xspots[k], xspots[k]), y=c(0,dt(xspots[k],df=18) ), lwd=1, lty=3)
}
x <- seq(from=-5, by=0.01, to=5)
dtvals <- dt(x, df=18)
par(lwd=2.5, cex=1.25, cex.lab=1.25, cex.axis=1.25, cex.main=1.25)
plot(x,dtvals, type="l", xlab="Test Statistic T", ylab="Probability Density", lwd=2.5)
points(x=c(-t,t), y=dt(c(-t,t),df=18), pch=19, cex=1.5)
text(x=c(-t,t)+ c(-0.2, 0.2), y=dt(c(-t,t),df=18)+0.04, labels=c("-t", "t"), cex=1.27)
lines(x=c(-t,-t), y=c(0,dt(-t,df=18) ), lwd=3)
lines(x=c(t,t), y=c(0,dt(t,df=18) ), lwd=3)
xspots <- seq(from=t, by=0.025, to=5)
for (k in 1:length(xspots)){
lines(x=c(-xspots[k], -xspots[k]), y=c(0,dt(-xspots[k],df=18) ), lwd=1, lty=3)
lines(x=c(xspots[k], xspots[k]), y=c(0,dt(xspots[k],df=18) ), lwd=1, lty=3)
}
xspots <- seq(from=t, by=0.025, to=5)
t <- (3.92 - 0) / SE; t
x <- seq(from=-5, by=0.01, to=5)
dtvals <- dt(x, df=18)
par(lwd=2.5, cex=1.25, cex.lab=1.25, cex.axis=1.25, cex.main=1.25)
plot(x,dtvals, type="l", xlab="Test Statistic T", ylab="Probability Density", lwd=2.5)
points(x=c(-t,t), y=dt(c(-t,t),df=18), pch=19, cex=1.5)
text(x=c(-t,t)+ c(-0.2, 0.2), y=dt(c(-t,t),df=18)+0.04, labels=c("-t", "t"), cex=1.27)
lines(x=c(-t,-t), y=c(0,dt(-t,df=18) ), lwd=3)
lines(x=c(t,t), y=c(0,dt(t,df=18) ), lwd=3)
xspots <- seq(from=t, by=0.025, to=5)
for (k in 1:length(xspots)){
lines(x=c(-xspots[k], -xspots[k]), y=c(0,dt(-xspots[k],df=18) ), lwd=1, lty=3)
lines(x=c(xspots[k], xspots[k]), y=c(0,dt(xspots[k],df=18) ), lwd=1, lty=3)
}
knit('Math241-HypothesisTesting.Rnw')
knit('STAT241-S19.Rnw')
gf_point( force.drag ~ velocity, data=drag,
groups = (velocity < 3.9) & !(velocity > 1 & velocity < 1.5) )
data(PorschePrice)
head(PorschePrice)
porsche.model <- lm( Price ~ Mileage, data=PorschePrice )
summary(porsche.model)
gf_point( resid(porsche.model) ~ fitted(porsche.model)) %>% gf_lm()
qqmath( ~ resid(porsche.model) )
knit('STAT241-S19.Rnw')
