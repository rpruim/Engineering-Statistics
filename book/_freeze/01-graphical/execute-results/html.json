{
  "hash": "ba5157f0fdfc3670af3e0221d8e6701e",
  "result": {
    "markdown": "---\nfig.height: 2.5\n---\n\n\n# Graphical Summaries of Data\n\n\n\n\n\n\n## Getting Started With RStudio \n\n![Welcome to RStudio](images/RStudio-Welcome.png)\n\n\n\nRStudio  is an integrated development environment (IDE) for R \na freely available language and environment for statistical computing and graphics.\nBoth are freely available for Mac, PC, and Linux.\n\nIn addition to running RStudio  on your local machine, you have the option\nof accessing an RStudio  server via a web browser.  (For best results, avoid \nInternet Explorer.)\n\n\n### Using R as a calculator\n\nNotice that RStudio  divides its world into four panels.  Several of the panels\nare further subdivided into multiple tabs.\nThe console panel is where we type commands that R will execute. \n\nR can be used as a calculator.  Try typing the following commands in the console panel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n15.3 * 23.4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 358.02\n```\n:::\n\n```{.r .cell-code}\nsqrt(16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nYou can save values to named variables for later reuse\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct = 15.3 * 23.4       # save result\nproduct                     # show the result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 358.02\n```\n:::\n\n```{.r .cell-code}\nproduct <- 15.3 * 23.4      # <- is assignment operator, same as =\nproduct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 358.02\n```\n:::\n\n```{.r .cell-code}\n15.3 * 23.4 -> newproduct   # -> assigns to the right\nnewproduct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 358.02\n```\n:::\n\n```{.r .cell-code}\n.5 * product                # half of the product\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 179.01\n```\n:::\n\n```{.r .cell-code}\nlog(product)                # (natural) log of the product\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.880589\n```\n:::\n\n```{.r .cell-code}\nlog10(product)              # base 10 log of the product\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.553907\n```\n:::\n\n```{.r .cell-code}\nlog(product, base = 2)        # base 2 log of the product\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.483896\n```\n:::\n:::\n\n\n\nThe semi-colon can be used to place multiple commands on one line.\nOne frequent use of this is to save and print a value all in one go:\n\n::: {.cell}\n\n```{.r .cell-code}\n15.3 * 23.4 -> product; product    # save result and show it\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 358.02\n```\n:::\n:::\n\n\n\n### Loading packages\n\nR is divided up into packages.  A few of these are loaded every time you\nrun R but most have to be selected.  This way you only have as much of R as you\nneed.\n\nIn the **Packages** tab, check the boxes next to the following packages to\nload them:\n<!-- begin itemize -->\n\n#. mosaic (a package from Project MOSAIC)\n#. DAAG  (a package that goes with the book *Data Analysis and Graphic*)\n\n<!-- end itemize -->\n\nYou an also load packages by typing, for example\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DAAG)       # loads the DAAG package if it is not already loaded\n```\n:::\n\n\n\n### Four Things to Know About R \n\n#### 1. R is case-sensitive {-}\n\nIf you mis-capitalize something in R it won't do what you want. If you get an error message about an \"object not found\",\ncheck to see that you spelled it correctly.\n\n#### 2. Functions in R use the following syntax: {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunctionname( argument1, argument2, ... )\n```\n:::\n\n\na. The arguments are **always** _surrounded by (round) parentheses_ and _separated by commas_.\n\nb. Some functions (like `data()`) have no required arguments, but you still need the parentheses.\n\nc. If you type a function name without the parentheses, you will see the _code_ for that\nfunction -- which probably isn't what you want at this point.\n\n#### 3. TAB completion and arrows can improve typing speed and accuracy. {-}\n\nIf you begin a command and hit the TAB key, R will show you a list of\npossible ways to complete the command.  If you hit TAB after the opening\nparenthesis of a function, it will show you the list of arguments it expects.\nThe up and down arrows can be used to retrieve past commands.\n\n#### 4. Hit ESCAPE to break out of a mess. {-}\n\t\nIf you get into some sort of mess typing (usually indicated by extra '$+$' \nsigns along the left edge, indicating that R is waiting for more \ninput -- perhaps because you have some sort of error in what has gone before), \nyou can hit the escape key to get back to a clean prompt.\n\n\n## Data in R \n\n### Data Frames\nMost often, data sets in R are stored in a structure called a \n**data frame**.  A data frame is designed to hold \"rectangular data\".\nThe people or things being measured or observed are called \n**observational units** (or subjects or cases when they are people).\nEach observational unit is represented by one row. \nThe different pieces of information recorded for each observational unit are stored in\nseparate columns, called **variables**.\n\n### Data in Packages\nThere are a number of data sets built into R \nand many more that come in various add on packages.\n\nYou can see a list of data sets in a particular package like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaicData)            # load the package\ndata(package = \"mosaicData\")   # see what data sets are in it\n```\n:::\n\n\n\nYou can find a longer list of all data sets available in any loaded package\nusing \n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\n\n\n### The HELPrct data set\nThe `HELPrct` data frame from the `mosaic` package\ncontains data from the Health Evaluation and Linkage to Primary Care\nrandomized clinical trial.  You can find out more about the study and\nthe data in this data frame by typing\n\n::: {.cell}\n\n```{.r .cell-code}\n?HELPrct\n```\n:::\n\n\n\nAmong other things, this will tell us something about the subjects (observational units) in\nthis study:\n\n> Eligible subjects were adults, who spoke Spanish or English, reported\nalcohol, heroin or cocaine as their first or second drug of choice, resided\nin proximity to the primary care clinic to which they would be referred or\nwere homeless. Patients with established primary care relationships they\nplanned to continue, significant dementia, specific plans to leave the\nBoston area that would prevent research participation, failure to provide\ncontact information for tracking purposes, or pregnancy were excluded.\n\n> Subjects were interviewed at baseline during their detoxification stay and\nfollow-up interviews were undertaken every 6 months for 2 years.\n\nIt is often handy to look at the first few rows of a data frame.  It will\nshow you the names of the variables and the kind of data in them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(HELPrct)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"anysubstatus\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"anysub\"],\"name\":[3],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"cesd\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"d1\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"daysanysub\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dayslink\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"drugrisk\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"e2b\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"female\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"g1b\"],\"name\":[12],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"homeless\"],\"name\":[13],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"i1\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"i2\"],\"name\":[15],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"id\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"indtot\"],\"name\":[17],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"linkstatus\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"link\"],\"name\":[19],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"mcs\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pcs\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pss_fr\"],\"name\":[22],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"racegrp\"],\"name\":[23],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"satreat\"],\"name\":[24],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"sexrisk\"],\"name\":[25],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"substance\"],\"name\":[26],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"treat\"],\"name\":[27],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"avg_drinks\"],\"name\":[28],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"max_drinks\"],\"name\":[29],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"hospitalizations\"],\"name\":[30],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"37\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"49\",\"5\":\"3\",\"6\":\"177\",\"7\":\"225\",\"8\":\"0\",\"9\":\"NA\",\"10\":\"0\",\"11\":\"male\",\"12\":\"yes\",\"13\":\"housed\",\"14\":\"13\",\"15\":\"26\",\"16\":\"1\",\"17\":\"39\",\"18\":\"1\",\"19\":\"yes\",\"20\":\"25.111990\",\"21\":\"58.41369\",\"22\":\"0\",\"23\":\"black\",\"24\":\"no\",\"25\":\"4\",\"26\":\"cocaine\",\"27\":\"yes\",\"28\":\"13\",\"29\":\"26\",\"30\":\"3\",\"_rn_\":\"1\"},{\"1\":\"37\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"30\",\"5\":\"22\",\"6\":\"2\",\"7\":\"NA\",\"8\":\"0\",\"9\":\"NA\",\"10\":\"0\",\"11\":\"male\",\"12\":\"yes\",\"13\":\"homeless\",\"14\":\"56\",\"15\":\"62\",\"16\":\"2\",\"17\":\"43\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"26.670307\",\"21\":\"36.03694\",\"22\":\"1\",\"23\":\"white\",\"24\":\"no\",\"25\":\"7\",\"26\":\"alcohol\",\"27\":\"yes\",\"28\":\"56\",\"29\":\"62\",\"30\":\"22\",\"_rn_\":\"2\"},{\"1\":\"26\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"39\",\"5\":\"0\",\"6\":\"3\",\"7\":\"365\",\"8\":\"20\",\"9\":\"NA\",\"10\":\"0\",\"11\":\"male\",\"12\":\"no\",\"13\":\"housed\",\"14\":\"0\",\"15\":\"0\",\"16\":\"3\",\"17\":\"41\",\"18\":\"0\",\"19\":\"no\",\"20\":\"6.762923\",\"21\":\"74.80633\",\"22\":\"13\",\"23\":\"black\",\"24\":\"no\",\"25\":\"2\",\"26\":\"heroin\",\"27\":\"no\",\"28\":\"0\",\"29\":\"0\",\"30\":\"0\",\"_rn_\":\"3\"},{\"1\":\"39\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"15\",\"5\":\"2\",\"6\":\"189\",\"7\":\"343\",\"8\":\"0\",\"9\":\"1\",\"10\":\"1\",\"11\":\"female\",\"12\":\"no\",\"13\":\"housed\",\"14\":\"5\",\"15\":\"5\",\"16\":\"4\",\"17\":\"28\",\"18\":\"0\",\"19\":\"no\",\"20\":\"43.967880\",\"21\":\"61.93168\",\"22\":\"11\",\"23\":\"white\",\"24\":\"yes\",\"25\":\"4\",\"26\":\"heroin\",\"27\":\"no\",\"28\":\"5\",\"29\":\"5\",\"30\":\"2\",\"_rn_\":\"4\"},{\"1\":\"32\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"39\",\"5\":\"12\",\"6\":\"2\",\"7\":\"57\",\"8\":\"0\",\"9\":\"1\",\"10\":\"0\",\"11\":\"male\",\"12\":\"no\",\"13\":\"homeless\",\"14\":\"10\",\"15\":\"13\",\"16\":\"5\",\"17\":\"38\",\"18\":\"1\",\"19\":\"yes\",\"20\":\"21.675755\",\"21\":\"37.34558\",\"22\":\"10\",\"23\":\"black\",\"24\":\"no\",\"25\":\"6\",\"26\":\"cocaine\",\"27\":\"no\",\"28\":\"10\",\"29\":\"13\",\"30\":\"12\",\"_rn_\":\"5\"},{\"1\":\"47\",\"2\":\"1\",\"3\":\"yes\",\"4\":\"6\",\"5\":\"1\",\"6\":\"31\",\"7\":\"365\",\"8\":\"0\",\"9\":\"NA\",\"10\":\"1\",\"11\":\"female\",\"12\":\"no\",\"13\":\"housed\",\"14\":\"4\",\"15\":\"4\",\"16\":\"6\",\"17\":\"29\",\"18\":\"0\",\"19\":\"no\",\"20\":\"55.508991\",\"21\":\"46.47521\",\"22\":\"5\",\"23\":\"black\",\"24\":\"no\",\"25\":\"5\",\"26\":\"cocaine\",\"27\":\"yes\",\"28\":\"4\",\"29\":\"4\",\"30\":\"1\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nWhen there are a lot of variables, this format can be hard to read.  The `glimps()` or `inspect()`\nfunctions proved some other options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(HELPrct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 453\nColumns: 30\n$ age              <int> 37, 37, 26, 39, 32, 47, 49, 28, 50, 39, 34, 58, 58, 6…\n$ anysubstatus     <int> 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, NA, 0, 1, 1, 1, 1, 1, …\n$ anysub           <fct> yes, yes, yes, yes, yes, yes, NA, yes, yes, yes, NA, …\n$ cesd             <int> 49, 30, 39, 15, 39, 6, 52, 32, 50, 46, 46, 49, 22, 36…\n$ d1               <int> 3, 22, 0, 2, 12, 1, 14, 1, 14, 4, 0, 3, 5, 10, 2, 6, …\n$ daysanysub       <int> 177, 2, 3, 189, 2, 31, NA, 47, 31, 115, NA, 192, 6, 6…\n$ dayslink         <int> 225, NA, 365, 343, 57, 365, 334, 365, 365, 382, 365, …\n$ drugrisk         <int> 0, 0, 20, 0, 0, 0, 0, 7, 18, 20, 8, 0, 0, 0, 0, 0, 0,…\n$ e2b              <int> NA, NA, NA, 1, 1, NA, 1, 8, 7, 3, NA, NA, NA, 1, NA, …\n$ female           <int> 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,…\n$ sex              <fct> male, male, male, female, male, female, female, male,…\n$ g1b              <fct> yes, yes, no, no, no, no, yes, yes, no, no, no, no, n…\n$ homeless         <fct> housed, homeless, housed, housed, homeless, housed, h…\n$ i1               <int> 13, 56, 0, 5, 10, 4, 13, 12, 71, 20, 0, 13, 20, 13, 5…\n$ i2               <int> 26, 62, 0, 5, 13, 4, 20, 24, 129, 27, 0, 13, 31, 20, …\n$ id               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17…\n$ indtot           <int> 39, 43, 41, 28, 38, 29, 38, 44, 44, 44, 34, 11, 40, 4…\n$ linkstatus       <int> 1, NA, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0…\n$ link             <fct> yes, NA, no, no, yes, no, no, no, no, no, no, no, no,…\n$ mcs              <dbl> 25.111990, 26.670307, 6.762923, 43.967880, 21.675755,…\n$ pcs              <dbl> 58.41369, 36.03694, 74.80633, 61.93168, 37.34558, 46.…\n$ pss_fr           <int> 0, 1, 13, 11, 10, 5, 1, 4, 5, 0, 0, 13, 13, 1, 1, 7, …\n$ racegrp          <fct> black, white, black, white, black, black, black, whit…\n$ satreat          <fct> no, no, no, yes, no, no, yes, yes, no, yes, no, yes, …\n$ sexrisk          <int> 4, 7, 2, 4, 6, 5, 8, 6, 8, 0, 2, 0, 1, 4, 8, 3, 4, 4,…\n$ substance        <fct> cocaine, alcohol, heroin, heroin, cocaine, cocaine, c…\n$ treat            <fct> yes, yes, no, no, no, yes, no, yes, no, yes, yes, no,…\n$ avg_drinks       <int> 13, 56, 0, 5, 10, 4, 13, 12, 71, 20, 0, 13, 20, 13, 5…\n$ max_drinks       <int> 26, 62, 0, 5, 13, 4, 20, 24, 129, 27, 0, 13, 31, 20, …\n$ hospitalizations <int> 3, 22, 0, 2, 12, 1, 14, 1, 14, 4, 0, 3, 5, 10, 2, 6, …\n```\n:::\n\n```{.r .cell-code}\ninspect(HELPrct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncategorical variables:  \n       name  class levels   n missing\n1    anysub factor      2 246     207\n2       sex factor      2 453       0\n3       g1b factor      2 453       0\n4  homeless factor      2 453       0\n5      link factor      2 431      22\n6   racegrp factor      4 453       0\n7   satreat factor      2 453       0\n8 substance factor      3 453       0\n9     treat factor      2 453       0\n                                   distribution\n1 yes (77.2%), no (22.8%)                      \n2 male (76.4%), female (23.6%)                 \n3 no (72%), yes (28%)                          \n4 housed (53.9%), homeless (46.1%)             \n5 no (62.2%), yes (37.8%)                      \n6 black (46.6%), white (36.6%) ...             \n7 no (71.5%), yes (28.5%)                      \n8 alcohol (39.1%), cocaine (33.6%) ...         \n9 no (50.3%), yes (49.7%)                      \n\nquantitative variables:  \n               name   class       min        Q1    median        Q3       max\n1               age integer 19.000000  30.00000  35.00000  40.00000  60.00000\n2      anysubstatus integer  0.000000   1.00000   1.00000   1.00000   1.00000\n3              cesd integer  1.000000  25.00000  34.00000  41.00000  60.00000\n4                d1 integer  0.000000   1.00000   2.00000   3.00000 100.00000\n5        daysanysub integer  0.000000   5.00000  33.00000 164.25000 268.00000\n6          dayslink integer  2.000000  74.00000 361.00000 365.00000 456.00000\n7          drugrisk integer  0.000000   0.00000   0.00000   1.00000  21.00000\n8               e2b integer  1.000000   1.00000   2.00000   3.00000  21.00000\n9            female integer  0.000000   0.00000   0.00000   0.00000   1.00000\n10               i1 integer  0.000000   3.00000  13.00000  26.00000 142.00000\n11               i2 integer  0.000000   4.00000  18.00000  33.00000 184.00000\n12               id integer  1.000000 119.00000 233.00000 348.00000 470.00000\n13           indtot integer  4.000000  32.00000  38.00000  41.00000  45.00000\n14       linkstatus integer  0.000000   0.00000   0.00000   1.00000   1.00000\n15              mcs numeric  6.762923  21.67575  28.60242  40.94134  62.17550\n16              pcs numeric 14.074291  40.38438  48.87681  56.95329  74.80633\n17           pss_fr integer  0.000000   3.00000   7.00000  10.00000  14.00000\n18          sexrisk integer  0.000000   3.00000   4.00000   6.00000  14.00000\n19       avg_drinks integer  0.000000   3.00000  13.00000  26.00000 142.00000\n20       max_drinks integer  0.000000   4.00000  18.00000  33.00000 184.00000\n21 hospitalizations integer  0.000000   1.00000   2.00000   3.00000 100.00000\n          mean          sd   n missing\n1   35.6534216   7.7102660 453       0\n2    0.7723577   0.4201653 246     207\n3   32.8476821  12.5144598 453       0\n4    3.0596026   6.1875894 453       0\n5   75.3073770  79.2374134 244     209\n6  255.6055684 151.0226916 431      22\n7    1.8871681   4.3365219 452       1\n8    2.5046729   2.5245232 214     239\n9    0.2362031   0.4252180 453       0\n10  17.9072848  20.0202390 453       0\n11  24.5474614  28.0201504 453       0\n12 233.4017660 134.7467214 453       0\n13  35.7284768   7.1522016 453       0\n14   0.3781903   0.4854990 431      22\n15  31.6766783  12.8393373 453       0\n16  48.0485416  10.7846027 453       0\n17   6.7064018   3.9950056 453       0\n18   4.6423841   2.8001526 453       0\n19  17.9072848  20.0202390 453       0\n20  24.5474614  28.0201504 453       0\n21   3.0596026   6.1875894 453       0\n```\n:::\n:::\n\n\n\nFrom this we see that there are 453 observational\nunits in this data set and 30 variables.\nThat's plenty of variables to get us started with exploration of data.\n\n### The KidsFeet data set\nHere is another data set in the `mosaic` package:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(KidsFeet)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"birthmonth\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"birthyear\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"length\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"width\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[6],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"biggerfoot\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"domhand\"],\"name\":[8],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"David\",\"2\":\"5\",\"3\":\"88\",\"4\":\"24.4\",\"5\":\"8.4\",\"6\":\"B\",\"7\":\"L\",\"8\":\"R\",\"_rn_\":\"1\"},{\"1\":\"Lars\",\"2\":\"10\",\"3\":\"87\",\"4\":\"25.4\",\"5\":\"8.8\",\"6\":\"B\",\"7\":\"L\",\"8\":\"L\",\"_rn_\":\"2\"},{\"1\":\"Zach\",\"2\":\"12\",\"3\":\"87\",\"4\":\"24.5\",\"5\":\"9.7\",\"6\":\"B\",\"7\":\"R\",\"8\":\"R\",\"_rn_\":\"3\"},{\"1\":\"Josh\",\"2\":\"1\",\"3\":\"88\",\"4\":\"25.2\",\"5\":\"9.8\",\"6\":\"B\",\"7\":\"L\",\"8\":\"R\",\"_rn_\":\"4\"},{\"1\":\"Lang\",\"2\":\"2\",\"3\":\"88\",\"4\":\"25.1\",\"5\":\"8.9\",\"6\":\"B\",\"7\":\"L\",\"8\":\"R\",\"_rn_\":\"5\"},{\"1\":\"Scotty\",\"2\":\"3\",\"3\":\"88\",\"4\":\"25.7\",\"5\":\"9.7\",\"6\":\"B\",\"7\":\"R\",\"8\":\"R\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n### The oldfaith data set\nA final example data set comes from the `alr4` package.  This package is probably not \nloaded (unless you already loaded it).  You can load it from the **Packages** tab or\nby typing the command\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(alr4)      # require(alr4) will also work\n```\n:::\n\n\nOnce you have done that, you will have access to the data set containing information about\nOld Faithful eruptions.\n\n:::{.center}\n\n{{< video https://www.youtube.com/embed/Qxf3xzirBrs width=\"560\" height=\"315\" title=\"Old Faithful\">}}\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(oldfaith)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Duration\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Interval\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"216\",\"2\":\"79\",\"_rn_\":\"1\"},{\"1\":\"108\",\"2\":\"54\",\"_rn_\":\"2\"},{\"1\":\"200\",\"2\":\"74\",\"_rn_\":\"3\"},{\"1\":\"137\",\"2\":\"62\",\"_rn_\":\"4\"},{\"1\":\"272\",\"2\":\"85\",\"_rn_\":\"5\"},{\"1\":\"173\",\"2\":\"55\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nIf you want to know the size of your data set, you can ask it how many rows and columns it has\nwith\n`nrow()`, `ncol()`, or `dim()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(oldfaith)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 270\n```\n:::\n\n```{.r .cell-code}\nncol(oldfaith)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ndim(oldfaith)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 270   2\n```\n:::\n:::\n\n\nIn this case we have 270 observations of each of two variables (the length of an eruption and the time until \nthe next eruption).\nIn a data frame, the observational units are always in the rows and the variables\nare always in the columns.  If you create data for use in R (or most other \nstatistical packages), you need to make sure your data are also in this shape.\n\n### Using your own data\n\nIn the Environment tab you will \"Import Dataset\".  Click on this import data \nfrom a CSV file, Excel spreadsheet, or a few other formats.  When you \ndo this, the R code will be displayed, so you can see how it is done in \nR code.\n\nIf you are using the RStudio server, you will first need to upload your file to the server (unless you can\naccess the file via URL).  To do this, choose \"Upload\" from the Files tab.\n\n\n## Graphical and Numerical Summaries of Data\n\n### The Most Important Template\n\nUsing the `mosiac` and `ggformula` packages, \nwe can compute a wide variety of graphical and numerical summaries \nusing the following general template:\n\n:::{boxedText}\n\n![The most important template](images/most-important-template.png){width='75%'}\n:::\n\nWe will see this same template used again for linear and non-linear \nmodeling as well, so it is is important to master it.^[This is textbook speak for \"you should really \ntake note of this -- probably memorize it.\"]\n\n* `goal`: The name of the function generally describes your goal, \n\t\tthe thing you want the computer to produce for you.  In the case of plotting,\n\t\tit is the name of the plot.  When we do numerical summaries it will be the \n\t\tname of the numerical summary (mean, median, etc.).\n* `y`: For plots, this is the variable that goes on the y-axis. \n* `x`: For plots, this is the variable that goes on the x-axis. \n* `formula`: Together, `y ~ x` is called a **formula**.\n\t\tVery often we can think of `y ~ x` as \"y depends on x\".\n\t\tWe will see that sometimes we can omit `y` ore replace `x` with `.` (there must\n\t\talways be something on the right-hand side).  We will even see things like \n\t\t`y ~ x | z`.  But the most important formula to learn is `y ~ x`.\n* `mydata:` A data frame must be given in which the variables mentioned in\n\t\tthe formula can be found.  Variables not found there will be looked for in the \n\t\tenclosing environment.  Sometimes we will take advantage of this to avoid creating\n\t\ta temporary data frame just to make a quick plot, but generally it is best to have\n\t\tall the information inside a data frame.\n\n\n## Scatterplots\n\nThe most common way to look at two quantitative variables is with a \nscatter plot.  The `gformula` function for this is `gf_point()`, \nand the basic syntax is\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point( yvar ~ xvar, data = dataName)\n```\n:::\n\n\n\nLet's look at an example. Let's see how bill length is related to body mass in some penguins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nhead(penguins) \n```\n\n::: {#fig-gf-point-1 .cell-output-display}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n\nA scatter plot of penguin data.\n:::\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g, data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![A scatter plot of penguin data.](01-graphical_files/figure-html/fig-gf-point-1.png){#fig-gf-point-2 width=60%}\n:::\n:::\n\n\n\nThat's all there is to it.  We can replace `bill_length_mm`, `body_mass_g`, and \n`penguins` with any variables and data set we like to get the scatter plot we want.\n\n### Adding Color\n\nLet's add some color. Consider the next two examples.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g, color = \"navy\", data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g, color = ~ species, data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![Setting color](01-graphical_files/figure-html/fig-mapping-and-setting-color-1.png){#fig-mapping-and-setting-color-1 width=432}\n:::\n\n::: {.cell-output-display}\n![Mapping color](01-graphical_files/figure-html/fig-mapping-and-setting-color-2.png){#fig-mapping-and-setting-color-2 width=432}\n:::\n:::\n\n\n<!-- begin itemize -->\n\n* In the first we are **setting** the color of the dots to be navy.\n* In the second, we are **mapping** color based on `species`.\nThink of `color = ~ species` as \"color depends on  species\".\n<!-- end itemize -->\n\nThe warnings, by the way, are indicating that two rows of data were not used in making the plot\nbecause they were missing data needed for the plot (either `bill_length_mm` or `body_mass_g`).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# This is a bit of bonus code, \n# in case you are interested to see how we find these two pengins.\npenguins |> \n  filter(is.na(bill_length_mm) | is.na(body_mass_g))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Gentoo\",\"2\":\"Biscoe\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2009\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Transparency and dot size\n\nWith so much data in so little space, overplotting (dots on top of each other) can make \nit hard to see what is going on. We can improve this plot by making the dots smaller\nand semi-transparent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g, \n         color = ~ species, data = penguins,\n         size = 0.8, alpha = 0.6)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![Adjustments to `alpha` and `size`.](01-graphical_files/figure-html/transparency-and-dot-size-1.png){width=480}\n:::\n:::\n\n\n\nThere are many other options we can use to refine our plots.  We'll learn about some of them as we \ngo along. You can use R 's built-in help to find out more.  Our you can type\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ngf_point() uses \n    * a formula with shape y ~ x. \n    * geom:  point \n    * key attributes:  alpha, color, size, shape, fill, group, stroke\n\nFor more information, try ?gf_point\n```\n:::\n:::\n\n\n\n### Conditional plots (aka Faceting)\n\nThe formula for a `ggformula` plot can be extended to create multiple\npanels, called facets, based on a \"condition\", often given by another variable. \nThe  general syntax for this becomes\n\n::: {.cell}\n\n```{.r .cell-code}\nplotname( y ~ x | condition, data = dataName )\n```\n:::\n\n\n\nYou can read the formula `y ~ x | condition` as saying that we want to know how y depends on x separately\nfor each condition.\nIn our penguins example, we might divide up the data according to the islands on which the penguins were spotted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g | island, \n         color = ~ species, data = penguins,\n         size = 0.8, alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![Using facets to separate the species.](01-graphical_files/figure-html/fig-facets-1.png){#fig-facets width=50%}\n:::\n:::\n\n\n\n### Other types of plots\n\nA scatter plot will be our most common plot for two quantitative variables, but we can use the same\ntemplate for any otehr type of plot.  Here are two examples.\n\n\n::: {#fig-penguins-more .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_density2d(bill_length_mm ~ body_mass_g, color = ~ species, data = penguins, alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_density2d()`).\n```\n:::\n\n```{.r .cell-code}\ngf_hex(bill_length_mm ~ body_mass_g, data = penguins, binwidth = c(250, 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_binhex()`).\n```\n:::\n\n::: {.cell-output-display}\n![A 2-d density plot.](01-graphical_files/figure-html/fig-penguins-more-1.png){#fig-penguins-more-1 width=432}\n:::\n\n::: {.cell-output-display}\n![A hex plot.](01-graphical_files/figure-html/fig-penguins-more-2.png){#fig-penguins-more-2 width=432}\n:::\n\nMore plots of penguins.\n:::\n\n\n\n\n## Graphing the Distribution of One Variable\n\nA **distribution** is described by telling what values occur \nand with what frequency.  That is, the distribution answers two \nquestions:\n<!-- begin itemize -->\n\n* What values?\n* How often?\n<!-- end itemize -->\n\nStatisticians have devised a number of graphs to help us see \ndistributions of a variable visually.\nIn these graphs, R can compute the y-variable for us.  In this case, we simply\nomit the `y` part of the formula, so the\ngeneral syntax for making a graph or numerical summary\nof one variable in a data frame is\n\n::: {.cell}\n\n```{.r .cell-code}\nplotname( ~ variable, data = dataName )\n```\n:::\n\n\nIn other words, there are three pieces of information we must provide to \nR in order to get the plot we want:\n\n:::{.enumerate}\n\n1. The **kind of plot**. \n(`gf_histogram()`, `gf_bar()`, `gf_density()`, `gf_boxplot()`, etc.) \n\n1. The name of the **variable** to plot.\n\n1. The name of the **data frame** this variable is a part of.\n\n:::\n\nNote: The same syntax works for numerical summaries as well -- thanks to the `mosaic`\npackage we can apply the same syntax for \n\t\t`mean()`, `median()`, `sd()`,\n\t\t`var()`, `max()`, `min()`, etc.\n\t\tLater we will use this syntax again to compute linear and \n\t\tnonlinear models.\n\n### Histograms (and density plots) for quantitative variables\n\nHistograms (and density plots) are the two most common ways of displaying the distribution \nof a quantitative variable.\n\n\nHere are a couple examples:\n\n\n::: {#fig-histogram .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_histogram( ~ Duration, data = oldfaith)\ngf_histogram( ~ age, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram-1.png){#fig-histogram-1 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram-2.png){#fig-histogram-2 width=432}\n:::\n\nExample histograms.\n:::\n\n\n\nIn each of these plots the height of the bar indicates how many observations\nfall within the range indicated by the bottom of the bar. So in the histogram below,\nthe red bar indicates that there are almost 60 eruptions of duration between 100 and 125 seconds\nin this data set.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The red bar indicates that there are almost 60 eruptions of duration between 100 and 125 seconds in this data set.](01-graphical_files/figure-html/fig-histogram-explained-1.png){#fig-histogram-explained fig-align='center' width=576}\n:::\n:::\n\n\n\nWe can control the (approximate) number of bins using the `bins` argument.\nThe number of bins (and to a lesser extent the positions of the bins)\ncan make a histogram look quite different.\n\n\n::: {#fig-histogram2 .cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\ngf_histogram( ~ Duration, data = oldfaith, bins = 8 )\ngf_histogram( ~ Duration, data = oldfaith, bins = 15 )\ngf_histogram( ~ Duration, data = oldfaith, bins = 30 )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram2-1.png){#fig-histogram2-1 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram2-2.png){#fig-histogram2-2 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram2-3.png){#fig-histogram2-3 width=432}\n:::\n\nHistogams with different numbers of bins.\n:::\n\n\n\n\nWe can use `binwidth` to set the width of the bins.\n\n\n::: {#fig-histogram3 .cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\ngf_histogram( ~ Duration, data = oldfaith, binwidth = 60 )\ngf_histogram( ~ Duration, data = oldfaith, binwidth = 20 )\ngf_histogram( ~ Duration, data = oldfaith, binwidth = 5 )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram3-1.png){#fig-histogram3-1 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram3-2.png){#fig-histogram3-2 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-histogram3-3.png){#fig-histogram3-3 width=432}\n:::\n\nHistograms with different bin widths.\n:::\n\n\n\nR also provides a \"smooth\" version called a density plot and a triangular version\ncalled a frequency polygon:; \n\n\n::: {#fig-density .cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\ngf_density( ~ Duration, data = oldfaith )\ngf_dens( ~ Duration, data = oldfaith )\ngf_freqpoly( ~ Duration, data = oldfaith )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-density-1.png){#fig-density-1 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-density-2.png){#fig-density-2 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-density-3.png){#fig-density-3 width=432}\n:::\n\nDensity plots and frequency polygons.\n:::\n\n\n\n\n### Describing the shape of a distribution\n\nIf we make a histogram of our data, we can describe the overall shape of the distribution.\nKeep in mind that the shape of a particular histogram may depend on the choice of bins.\nChoosing too many or too few bins can hide the true shape of the distribution.  (When in doubt, make\nmore than one histogram.)\n\nHere are some words we use to describe shapes of distributions.\n\n<!-- begin description -->\n* **symmetric** The left and right sides are mirror images of each other.\n* **skewed** The distribution stretches out farther in one direction than in the other.\n(We say the distribution is skewed toward the long tail.)\n* **uniform** The heights of all the bars are (roughly) the same.\n(So the data are equally likely to be anywhere within some range.)\n* **unimodal** There is one major \"bump\" where there is a lot of data.\n* **bimodal** There are two \"bumps\".\n* **outlier** An observation that does not fit the overall pattern of the rest of \nthe data.\n<!-- end description -->\n\nWe'll learn about another graph used for quantitative variables (boxplots)\nsoon.\n\n### Bar graphs for categorical variables\n\nBar graphs are a way of displaying the distribution of a categorical variable.\n\n\n::: {#fig-bargraph .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_bar( ~ species, data = penguins)   # vertical bars\ngf_bar(species ~ ., data = penguins)  # horizontal bars\n```\n\n::: {.cell-output-display}\n![vertical bars](01-graphical_files/figure-html/fig-bargraph-1.png){#fig-bargraph-1 width=432}\n:::\n\n::: {.cell-output-display}\n![horizontal bars](01-graphical_files/figure-html/fig-bargraph-2.png){#fig-bargraph-2 width=432}\n:::\n\nBar graphs\n:::\n\n\n\nStatisticians rarely use pie charts because they are harder to read except in a few special cases (like comparing\na proportion to 50%).\n\n### Overlaying and faceting data\n\nOverlaying and faceting work the same for these one variables plots as they did for the scatterplots above.\n\n\n::: {#fig-overlaying-and-faceting .cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\ngf_bar( ~ species | island, data = penguins)\ngf_histogram( ~ body_mass_g | species, data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n```{.r .cell-code}\ngf_dens( ~ body_mass_g, color = ~ species, data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-overlaying-and-faceting-1.png){#fig-overlaying-and-faceting-1 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-overlaying-and-faceting-2.png){#fig-overlaying-and-faceting-2 width=432}\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/fig-overlaying-and-faceting-3.png){#fig-overlaying-and-faceting-3 width=432}\n:::\n\nOverlaying and faceting in plots\n:::\n\n\n\nFor example, we might like to see how the ages of men and women compare \nin the HELP study, or whether the distribution of weights of male mosquitoes \nis different from the distribution for females.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_histogram( ~ age | sex, data = HELPrct, binwidth = 5)\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/compare-ages-1.png){width=432}\n:::\n\n```{.r .cell-code}\ngf_dens( ~ length | sex, data = KidsFeet )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/compare-ages-2.png){width=432}\n:::\n:::\n\n\n\n\nWe can do the same thing for bar graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_bar( ~ substance | sex, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![Facets in a bar graph.](01-graphical_files/figure-html/fig-substance-by-sex-1.png){#fig-substance-by-sex width=50%}\n:::\n:::\n\n\n\n### Grouping and bar charts\n\nWhen dividing bar charts into multiple colors, we can present the segmented bars \"stacked\" (the default)\nor \"dodged\":\n\n\n::: {#fig-stack-and-dodge .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_bar(~substance, fill = ~sex, data = HELPrct)\ngf_bar(~substance, fill = ~sex, data = HELPrct, position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![Stacked bar graph.](01-graphical_files/figure-html/fig-stack-and-dodge-1.png){#fig-stack-and-dodge-1 width=432}\n:::\n\n::: {.cell-output-display}\n![Dodged bar graph.](01-graphical_files/figure-html/fig-stack-and-dodge-2.png){#fig-stack-and-dodge-2 width=432}\n:::\n\nWe can show different groups using stacked or dodged bar graphs.\n:::\n\n\n\n### Proportions and bar charts\n\nSometimes it is better to display bars with proportions rather than counts. But then we must decide\nwhat to use for the denominator.\nIn the first example below, the total of all teh bars adds to 1. In the second plot, the total\nadds to one for each x variable, which makes it easier to see how the proportions of male and female\n.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ngf_props(~substance, fill = ~sex, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/gf-props-1.png){width=432}\n:::\n\n```{.r .cell-code}\ngf_props(~substance, fill = ~sex, data = HELPrct, denom = ~ x)\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/gf-props-2.png){width=432}\n:::\n:::\n\n\n\n## Labeling plots\n\nOften the defaults labels are not ideal for publication purposes. You can add titles and captions\nand change the labeling of variables using `gf_labs()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(bill_length_mm ~ body_mass_g | island, \n         color = ~ species, data = penguins,\n         size = 0.8, alpha = 0.6) |>\n  gf_labs(x = \"body mass (g)\", y = \"bill length (mm)\", \n          title = \"Penguin measurments on 3 islands\", caption = \"Data Source: palmerpenguins\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![Informative labels and make plots easier to read.](01-graphical_files/figure-html/fig-gf-labs-1.png){#fig-gf-labs width=768}\n:::\n:::\n\n\n\nNotice the `|>` (called the **pipe symbol** and sometimes read \"then\") in the example above. \nThis important and connects the labeling below to the plot above.\n\n## Exporting Plots\n\nYou can save plots to files or copy them to the clipboard using the \n**Export** menu in the **Plots** tab.  It is quite simple to copy the \nplots to the clipboard and then paste them into a Word document, for example.\nYou can even adjust the height and width of the plot first to get it the \nshape you want.  _But there are much better ways to produce documents \nwith R graphics in them!_  See the next section.\n\n## Reproducibilty\n\nCopy-and-paste is a bad workflow for lots of reasons, including:\n<!-- begin itemize -->\n\n* It is tedious, unless there is very little to copy and paste.\n* It is error-prone -- it's easy to copy to little or too much, or to grab the wrong thing,\nor to copy when you want to cut or cut when you want to copy.\n* If something changes, you have to start all over.\n* You have no record of what you did (unless you are an unusual person who\ntakes detailed notes about all the copying and pasting).\n<!-- end itemize -->\nSo while copy-and-paste seems easy and convenient, it is not _reproducible_.\nReproducibility is important when projects are large, when it is important to have record of \nexactly what was done, or when the same analysis is applied to multiple data sets (or a data set\nthat is growing over time).\n\nRStudio  makes it easy to use techniques of reproducible research to create\ndocuments that include text, R commands, R output, and R graphics.\n\n### Quarto\n\nThe simplest version of this uses a format called Quarto^[A similar, but older, way of doing this uses R Markdown.\nIf you have used R Markdown before, learning Quarto will be very easy -- they are very similar.]\nQuarto is a simple mark up language that allows for a few basic improvements on plain text\n(section headers, bulleted lists, numbered lists, bold, italics, etc.).\nQuarto adds the ability to mix in the R stuff. (And it has some fancier stuff, like\nembedding videos.)\nThe end product can be an HTML file, a PDF document, even a Word document. HTML\nis especially good for producing web documents, but it is also useful as preview mode,\neven if you eventually render to PDF (or Word).^[You can actually mix in arbirary HTML and even css, so if you\nare good at HTML, you can have quite a bit of control over how things look. But if you do that, some things\nwon't convert ot PDF or Word. Here will will focus on the basics and things that work in \nmultiple output formats.]\n\n#### Creating a new document\n\nTo create a new Quarto document, go to \"File\", \"New File\", then \"Quarto document\":\n\nFrom there, choose either \"document\" or \"from template\".  The `mosaic` plain \ntemplate is a good starting point.\n\n<!-- begin center -->\n\n\t![Caption](%s.png)width = 3in]{images/FromTemplate.png}\n<!-- end center -->\n\n\nWhen you do this, a file editing pane will open with a template inserted.  If\nyou click on \"Knit HTML\", RStudio  will turn this into an HTML file and\ndisplay it for you.  Give it a try.  You will be asked to name your file if you\nhaven't already done so.  If you are using the RStudio  server in a browser,\nthen your file will live on the server (``in the cloud\") rather than on your\ncomputer.\n\nIf you look at the template file you will see that the file has two kinds of\nsections.  Some of this file is just normal text (with some extra symbols to\nmake things bold, add in headings, etc.)  You can get a list of all of these\nmark up options by selecting the \"Markdown Quick Reference\" in the help\nmenu.\n\n<!-- begin center -->\n\n\t![Caption](%s.png)width = 3.5in]{images/MarkdownQuickReference.png}\n<!-- end center -->\n\nThe second type of section is an R code chunk.  These are colored differently to make them\neasier to see.  You can insert a new code chunk by selecting by selecting\nthe appropriate chunk type (R in our case) from the menu below.\n<!-- begin center -->\n\n\t![Caption](%s.png)width = 1.2in]{images/InsertChunk.png}\n<!-- end center -->\n\nYou can also type \n````\n::: {.cell}\n\n:::\n```\n\nto begin and end the code chunk if you would rather type.\nYou can put any R code in these code chunks and the results (text output or graphics) as well\nas the R code will be displayed in your HTML file.\n\n<!-- There are options to do things like (a) run R code without displayng it, (b) run R code without -->\n<!-- displaying the output, (c) controling size of plots, etc., etc.   -->\n<!-- But for starting out, this is really all you need to know. -->\n\n### R Markdown files must be self-contained {-}\nR Markdown files do not have access to things you have done in your console.  (This is good, else \nyour document would change based on things not in the file.)  This means that you must explicitly\nload any data packages that you use _in the R Markdown file_. In this class,\nthis means that most of your R Markdown files will have a chunk near the beginning that \nincludes\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n:::\n\n\nIf you use one of the RMarkdown templates provided, \nthis (and some otehr things) will be included in the template and save you some time.\n\n<!-- \\iffalse -->\n<!-- \\subsubsection{Creating an R Markdown document} -->\n<!-- To create an R Markdown document, choose ``File\", then ``New File\", then ``R Markdown\".  The file -->\n<!-- will open with a template already loaded.   Take a quick look and you will see that most  -->\n<!-- of this is easy to read.  You can see some text with a few extra symbols thrown in here and  -->\n<!-- there and some chunks of \\R\\ code. -->\n<!-- Now click on the \"knit HTML\" button and this document will be converted to HTML. -->\n\n<!-- To create your own content, simply delete out the things you don't want or need -->\n<!-- and replace them with your own content.  If you forget the markup, there is a help button -->\n<!-- that will lead you to a quick reference guide.  To add a chunk of \\R\\ code, click on  -->\n<!-- ``Chunk\" and then ``Insert Chunk\" and put your \\R\\ code inside the chunk. -->\n\n<!-- In addition to knitting the document to HTML, you can do a number of other things that will -->\n<!-- make your work more efficient.  In the ``Chunk\" menu, you can choose to run a single chunk  -->\n<!-- or all the chunks.  This will execute your commands in the console so you can make sure  -->\n<!-- your \\R\\ code is working one chunk at a time.  There is also a ``run\" button that allows you -->\n<!-- to run just one line from within a chunk. -->\n\n<!-- \\subsubsection{R Markdown files do not have access to the console environment} -->\n<!-- One thing you need to remember about R Markdown documents is that the file must be self-contained. -->\n<!-- This ensures that the document is portable.  It also means that the docuemnt does not have  -->\n<!-- access to the things in your console environment.  All data must be loaded in the file.   -->\n<!-- Similarly, all packages you use must also be loaded in the file.  If you start getting messages  -->\n<!-- about objects not being found, one possible cause is that you have forgotten to get some  -->\n<!-- data or some package loaded inside your file.  (Typos are another cause for these messages --  -->\n<!-- check your spelling and capitalization.) -->\n<!-- \\fi -->\n\n### Chunk options\nR Markdown provides a number of chunk options that control how R code is processed.\nYou can use them to do things like:\n\n<!-- begin itemize -->\n* the code without displaying it (good for polished reports -- your client doesn't want to see the code)\n* the code without running it -- mainly useful for demonstration purposes\n* the size and alignment of graphics\n<!-- end itemize -->\n\nYou can set default values for the chunk options and you can also override them in individual\nchunks.  See the R Markdown help for more information about chunk options.\n\nThe default plots are often bigger than required.  The following chunk options are a place to \nstart.  They can be adjusted as necessary.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nopts_chunk$set(fig.width = 5, fig.height = 2, fig.align = \"center\", fig.show = \"hold\")\n```\n:::\n\n\nSome of these document settings can also be set in the YAML header \n(the top few lines of the RMarkdown file).\n\n### knitr/latex\nThere is another system that produces PDFs by combining TEX COMMAND NOT FOUND LaTeX   and R This is the system\nused to create this document and it gives much more control over paper-like formatting.  The\nquality is good enough for profession publishing.  If you already knwow TEX COMMAND NOT FOUND LaTeX   it is very\neasy to learn.  If you don't know TEX COMMAND NOT FOUND LaTeX   then you need to learn the basics of TEX COMMAND NOT FOUND LaTeX   to get\ngoing, but it isn't very difficult.\n\nR code and output can be copied and pasted as well.  It's best to use a \nfixed width font (like Courier) for R code so that things align properly.\n\nNote:  RStudio  provide some nice utilities for creating documents that include\ntext, code, graphics, and statistical analyses all in one document.  That's how this \ndocument was produced.  The simpler of these is called RMarkdown.  The resulting file\nwill be an HTML file with embedded plots.  You can gain more control over the output\nby using `knitr` which provides a way to combine $\\LaTeX$ and R in a single\ndocument.  The resulting document in this case is a high quality PDF\n\n<!-- The block below should be commented out -->## A Few Bells and Whistles\nThere are lots of arguments that control how these plots look.  Here are just a\nfew examples, some of which we have already seen.\n\n<!--  ### auto.key -->\n<!--  <span style=\"color:brown\">auto.key = TRUE</span> turns on a simple legend for the grouping variable.   -->\n<!--  (There are ways to have more control, if you need it.) -->\n<!--  <<iris-xyplot-key,cache = TRUE,fig.width = 2.6,fig.height = 2.4>>= -->\n<!--  xyplot(Sepal.Length ~ Sepal.Width, groups = Species, data = iris,  -->\n<!--  \tauto.key = TRUE)    -->\n<!--  ```\n -->\n\n### alpha, size\nSometimes it is nice to have elements of a plot be partly transparent.  When\nsuch elements overlap, they get darker, showing us where data are \"piling up.\"\nSetting the `alpha` argument to a value between 0 and 1 controls the\ndegree of transparency: 1 is completely opaque, 0 is invisible.  The\n`size` argument controls the size of lines and points.\n\nHere is another example using data on 150 iris plants of three species.\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(Sepal.Length ~ Sepal.Width, color = ~ Species, data = iris, \n\talpha = .6, size = 1.8) \n```\n\n::: {.cell-output-display}\n![150 iris plants from 3 species.](01-graphical_files/figure-html/fig-iris-alpha-1.png){#fig-iris-alpha width=576}\n:::\n:::\n\n\n### main, sub, xlab, ylab {-}\n\nYou can add a title or subtitle, or change the default labels of the axes.\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(Sepal.Length ~ Sepal.Width, color = ~Species, data = iris, \n\tmain = \"Some Iris Data\",\n\tsub = \"(R. A. Fisher analysized this data in 1936)\",\n\txlab = \"sepal width (cm)\",\n\tylab = \"sepal length (cm)\",\n\talpha = .6 \n)\n```\n\n::: {.cell-output-display}\n![We can add labels using `main`, `sub`, `xlab`, and `ylab`. (Using `gf_labs()` is another way to do this.)](01-graphical_files/figure-html/fig-iris-xyplot-text-1.png){#fig-iris-xyplot-text width=576}\n:::\n:::\n\n\n\n#### linetype, linewidth, fill, shape {-}\n\nThese can be used to change the line type, line width, plot sympbol, and color of filled in regions.\n<!-- To specify multiples (one for each group), use the `c()` function (see below). -->\n\n::: {#fig-pch-lwd-lty .cell layout-ncol=\"1\"}\n\n```{.r .cell-code}\ngf_dens( ~age, data = HELPrct, color = ~ sex, linetype = ~ sex)\ngf_dens( ~age, data = HELPrct, color = ~ sex, linetype = \"dotted\")\ngf_histogram( ~ age, data = HELPrct, fill = 'steelblue')\n```\n\n::: {.cell-output-display}\n![Mapping linetype](01-graphical_files/figure-html/fig-pch-lwd-lty-1.png){#fig-pch-lwd-lty-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Setting linetype](01-graphical_files/figure-html/fig-pch-lwd-lty-2.png){#fig-pch-lwd-lty-2 width=480}\n:::\n\n::: {.cell-output-display}\n![Use fill, rather than color, for filled in regions.](01-graphical_files/figure-html/fig-pch-lwd-lty-3.png){#fig-pch-lwd-lty-3 width=480}\n:::\n\nExamples using `linetype` and `fill`.\n:::\n\n\nYou can see a list of the hundreds of available color names using `colors()`:\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors()\n```\n:::\n\n<!-- ### Setting some defaults -->\n\n<!-- Default settings for graphics properties can be set as follows: -->\n\n<!-- ```{r } -->\n<!-- #| label: fig-fontsize -->\n<!-- #| fig-cap: \"\" -->\n<!-- #| layout-ncol: 1 -->\n<!-- theme_set(theme_classic(base_size = 6))    # base size for text is 6 point; classic theme. -->\n<!-- gf_dens( ~age, data = HELPrct, color = ~ sex, linetype = \"dashed\") -->\n<!-- theme_set(theme_bw(base_size = 8))     -->\n<!-- gf_dens( ~age, data = HELPrct, color = ~ sex, linetype = \"dashed\") -->\n<!-- ``` -->\n\n## Getting Help in RStudio\n\n### The RStudio  help system\nThere are several ways to get RStudio  to help you when you forget something.\nMost objects in packages have help files that you can access by typing something \nlike:\n\n::: {.cell}\n\n```{.r .cell-code}\n?bargraph\n?histogram\n?HELPrct\n```\n:::\n\nYou can search the help system using\n::: {.cell}\n\n```{.r .cell-code}\nhelp.search('Grand Rapids')    # Does R know anything about Grand Rapids?\n```\n:::\n\nThis can be useful if you don't know the name of the function or data set you \nare looking for.\n\n### Tab completion\nAs you type the name of a function in RStudio  you can hit the tab key and it\nwill show you a list of all the ways you could complete that name, and after\nyou type the opening parenthesis, if you hit the tab key, you will get a list\nof all the arguments and (sometimes) some helpful hints about what they are.)\n\n### History\nIf you know you have done something before, but can't remember how, you can\nsearch your history.  The history tab shows a list of recently executed\ncommands.  There is also a search bar to help you find things from longer ago.\n\n### Error messages\n\nWhen things go wrong, R tries to help you out by providing an error message.\nIf you can't make sense of the message, you can try copying and pasting your\ncommand and the error message and sending to me in an email.  One common error\nmessage is illustrated below.\n\n::: {.cell}\n\n```{.r .cell-code}\nfred <- 23\nfrd\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'frd' not found\n```\n:::\n:::\n\nThe object `frd` is not found because it was mistyped.  It should have\nbeen `fred`.  If you see an \"object not found\" message, check your\ntyping and check to make sure that the necessary packages have been loaded.\n\n## Graphical Summaries -- Important Ideas\n\n### The Most Important Template\n\nThe plots we have created have all followed a single template\n\n![The most important template](images/most-important-template.png){width='75%'}\n\nWe will see this same template used again for numerical summaries and linear and non-linear \nmodeling as well, so it is is important to master it.\nTo use it, you just fill in the boxes with the information for your particular task.\n\n<!-- begin itemize -->\n\n* `goal`: The name of the function generally describes your goal, \n\t\tthe thing you want the computer to produce for you.  In the case of plotting,\n\t\tit is the name of the plot.  When we do numerical summaries it will be the \n\t\tname of the numerical summary (mean, median, etc.).\n* `formula`: For plotting, the formula describes which variables are \n\t\tused on the x-axis, the y-axis and for conditioning.  The general scheme is `y ~ x | z`\n\t\twhere `z` is the conditioning variable.  Sometimes `y` or `z` \n\t\tare missing (but the right-hand side `x` must always be included in a formula).\n* `mydata:` A data frame must be given in which the variables mentioned in\n\t\tthe formula can be found.  Variables not found there will be looked for in the \n\t\tenclosing environment.  Sometimes we will take advantage of this to avoid creating\n\t\ta temporary data frame just to make a quick plot, but generally it is best to have\n\t\tall the information inside a data frame.\n* `...` There are many optional arguments to control sizes, colors, etc.\n\t We will introduce these as they are needed, but several examples have been \n\t given in this chapter as well. Consult the help files for assistance.\n\t\t\n<!-- end itemize -->\n\nJust fill in the boxes and get your plot.\n\n### Patterns and Deviations from Patterns\n\nThe goal of a statistical plot is to help us see \n<!-- begin itemize -->\n\n* potential patterns in the data, and \n* deviations from those patterns.\n<!-- end itemize -->\n\n### Different Plots for Different Kinds of Variables\n\nGraphical summaries can help us see the _distribution_ of a variable \nor the _relationships_ between two (or more) variables.  The type of plot\nused will depend on the kinds of variables involved.\nThere is a nice summary of these on page~48.  You can use `demo()` to see how\nto get R to make the plots in this section.\n\nLater, when we do statistical analysis, we will see that the analysis we use will \nalso depend on the kinds of variables involved, so this is an important idea.\n\n### Side-by-side Plots and Overlays Can Reveal Importance of Additional Factors\n\nThe `ggformula` graphics plots make it particularly easy to generate plats that \ndivide the data into groups and either produce a panel for each group (using |!)\nor display each group in a different way (different colors or symbols, using \nthe `groups` argument).  These plots can reveal the \npossible influence of additional variables -- sometimes called covariates.\n\n### Area = (relative) frequency\n\nMany plots are based on the key idea that our eyes are good at comparing areas.  Plots \nthat use area (e.g., histograms, mosaic plots, bar charts, pie charts) should always obey\nthis principle\n\n:::{.center}\nArea $=$ (relative) frequency\n:::\n\nPlots that violate this principle can be deceptive and distort the true nature\nof the data.\n\n<!-- % \\subsubsection*{An Example: Histogram with unequal bin widths} -->\n<!-- %  -->\n<!-- % It is possible to make histograms with bins that have different widths. -->\n<!-- % But in this case it is important that the height of the bars is chosen so  -->\n<!-- % that area (\\emph{NOT height}) is proportional to frequency.   -->\n<!-- % Using height instead of area would distort the picture. -->\n<!-- %  -->\n<!-- % When unequal bin sizes are specified, \\function{histogram()} by default chooses -->\n<!-- % the density scale: -->\n<!-- %  -->\n<!-- % <<hist-unequal-bins,fig.width = 3,fig.height = 2>>= -->\n<!-- % gf_histogram( ~ Sepal.Length, data = iris, breaks = c(4,5,5.5,5.75,6,6.5,7,8,9)) -->\n<!-- % @ -->\n<!-- % The density scale is important. -->\n<!-- % It tells \\R\\ to use a scale such that  -->\n<!-- % the area (height $\\times$ width) of the rectangles is equal to the relative frequency. -->\n<!-- % For example, the bar from 5.0 to 5.5 has width $\\frac12$ and height about $0.36$, so  -->\n<!-- % the area is $0.18$, which means approximately 18\\% of the sepal lengths are  -->\n<!-- % between 5.0 and 5.5. -->\n<!-- %  -->\n<!-- %  -->\n<!-- % It would be incorrect to choose \\option{type = \"count\"} or \\option{type = \"proportion\"} since -->\n<!-- % this distorts the picture of the data.  Fortunately, \\R\\ will warn you if you try: -->\n<!-- % <<hist-unequal-bins-bad-echo,fig.width = 3,fig.height = 2,eval = FALSE>>= -->\n<!-- % histogram( ~ Sepal.Length, data = iris, breaks = c(4,5,5.5,5.75,6,6.5,7,8,9), type = 'count') -->\n<!-- % @ -->\n<!-- % <<hist-unequal-bins-bad,fig.width = 3,fig.height = 2,echo = FALSE>>= -->\n<!-- % trellis.par.set(theme = col.fastR2(bw = T)) -->\n<!-- % histogram( ~ Sepal.Length, data = iris, breaks = c(4,5,5.5,5.75,6,6.5,7,8,9),type = \"count\") -->\n<!-- % trellis.focus('panel',1,1) -->\n<!-- % grid.text(y = .7,'Never do this!', gp = gpar(col = 'red',cex = 2,alpha = .6)) -->\n<!-- % trellis.unfocus() -->\n<!-- % trellis.par.set(theme = col.mosaic()) -->\n<!-- % @ -->\n<!-- %  -->\n<!-- % Notice how different this looks.  Now the heights are equal to the relative -->\n<!-- % frequency, but this makes the wider bars have too much area. -->\n\n\n## Exercises\n\nThe solutions to these exercises should be done using an RMarkdown document\nand knitTHML in RStudio.\nInclude both the plots and the code you used to make them as well as any\nrequired discussion.  Once you get the plots figured out, feel free to \nuse some of the bells and whistles to make the plots even better.\n\n:::{.problem #exr-oldfaith}\n**Old Faithful**\n\nCreate a scatterplot using the two variables in the `oldfaith`\ndata frame (available in the `alr4` package).\nWhat do we learn about Old Faithful eruptions from this plot?\n:::\n\n:::{.problem #exr-CPS85}\n**CPS85**\n\nWhere do the data in the `CPS85` data frame (in the \n`mosaic` package) come from?\nWhat are the observational units? How many are there?\n:::\n\n:::{.problem #exr-CPS85-quant}\n**Quantitative variable in CPS85**\n\nChoose a quantitative variable that interests you in the `CPS85`\ndata set.  Make an appropriate plot and comment on what you see.\n:::\n\n:::{.problem #exr-CPS85-cat}\n**Categorical variable in CPS85**\n\nChoose a categorical variable that interests you in the `CPS85`\ndata set.  Make an appropriate plot and comment on what you see.\n:::\n\n:::{.problem #exr-CPS85-2-vars}\n**Multiple variables in CPS85**\n\nCreate a plot that displays two or more variables from the \n`CPS85` data. At least one should be quantitative and at least one should be categorical.\nComment on what you can learn from your plot.\n:::\n\n:::{.problem #exr-mpg}\n**mpg**\n\nWhere do the data in the `mpg` data frame (in the \n`ggplot2` package) come from?  What are the observational \nunits?  How many are there?\n:::\n\n:::{.problem #exr-mpg-quant}\n**Quantitative variable in mpg**\n\nChoose a quantitative variable that interests you in the `mpg`\ndata set.  Make an appropriate plot and comment on what you see.\n:::\n\n:::{.problem #exr-mpg-cat}\n**Categorial variable in mpg**\n\nChoose a categorical variable that interests you in the `mpg`\ndata set.  Make an appropriate plot and comment on what you see.\n:::\n\n:::{.problem #exr-mpg-multivar}\n**Multiple variables in mpg**\n\nCreate a plot that displays two or more variables from the `mpg` data. \nAt least one should be quantitative and at least one should be categorical.\nComment on what you can learn from your plot.\n:::\n\n:::{.problem #exr-fires}\n**Fires**\n\nThe file at <https://rpruim.github.io/Engineering-Statistics/data/Fires.csv>\nis a csv file containing data on wild lands fires in the US over a number of years.\nYou can load this data one of two ways.\n\n* Go to the **Environment** tab, select **Import Dataset**, choose **From Text** (either option will due) \nand follow the instructions.\n* Use the following command in R \n\t\t\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://rpruim.github.io/Engineering-Statistics/data/Fires.csv\"\n\n# equivalent to \"From Text (base)\" in RStudio\nFires <- read.csv(url)\n\n# alternative method -- equivalent to \"From Text (readr)\" in RStudio\nlibrary(readr)\nFires <- read_csv(url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 52 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): Year, Fires, Acres\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nYou can also use either of these methods to read from a file rather than from a\nweb URL, so this is a good way to get your own data into R \n\na. The source for these data claim that data before a certain year should not be compared\n\t\tto data from after that year because the older data were computed a different way and\n\t\tare not considered as reliable.  What year is the break point?  Use graphs of the data \n\t\tover time to estimate when something changed.\nb. Create a data set that contains only the data from the new data regime (based on your answer in the previous problem).\n   You can trim the data to just the subset you want using `filter()`.  For \n\t example, to get just the subset of years since 1966, you could use the code below.\n   (Be sure to save the result with a new new name if you want to keep the original data available.)\n\t\t\n::: {.cell}\n\n```{.r .cell-code}\nFires2 <-               # create a new data set called Fires2\n  Fires |>              # start with all the Fires data\n  filter(Year > 1966)   # then filter to keep only years after 1966\n```\n:::\n\nc. Using only the data from the smaller set you just created, \nhow would you describe what is happening with fires over time?\n\n:::\n\n:::{.problem #exr-i1-and-i2}\n**What are i1 and i2?**\n\nUse R s help system to find out what the `i1` and `i2` \nvariables are in the `HELPrct` data frame.  Make histograms\nfor each variable and comment on what you find out.  How would you describe\nthe shape of these distributions?  Do you see any outliers (observations\nthat don't seem to fit the pattern of the rest of the data)?\n:::\n\n:::{.problem #exr-i1-and-i2-by-sex}\n**i1 and i2 among men and among women**\n\nCompare the distribution of `i1` among men vs. among women.  Do the same for `i2`.\n:::\n\n:::{.solution}\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_dens( ~max_drinks, color = ~ sex, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-33-1.png){width=432}\n:::\n\n```{.r .cell-code}\ngf_dens( ~avg_drinks, color = ~ sex, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-33-2.png){width=432}\n:::\n:::\n\n:::\n\n:::{.problem #exr-i1-and-i2-by-substance}\n**i1 and i2 among different treatment groups**\n\nCompare the distributions of `i1` among the three `substance` groups.\nDo the same for `i2`.\n:::\n\n:::{.solution}\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_dens( ~i1, color = ~ substance, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-34-1.png){width=432}\n:::\n\n```{.r .cell-code}\ngf_dens( ~i2, color = ~ substance, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-34-2.png){width=432}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_dens( ~i1 | sex, color = ~ substance, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-35-1.png){width=432}\n:::\n\n```{.r .cell-code}\ngf_dens( ~i2 | sex, color = ~ substance, data = HELPrct )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-35-2.png){width=432}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point( i2 ~ i1, color = ~ sex, data =  HELPrct, alpha = .6, size = .6 )\n```\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-36-1.png){width=432}\n:::\n:::\n\n:::\n\n:::{.problem #exr-snow-gr}\n**Snow in GR**\n\nThe `SnowGR` contains historical data on snowfall in Grand Rapids, MI.\nThe snowfall total for January, 2014 was 36.6 inches.\n\na. Create a histogram of January snowfall totals.  How unusual is 36.6 inches of \nsnow in January?\n\nb. If there is a lot of snow in January, should we expect to have unusually much\nor little snow in February?  Make a scatter plot comparing January and February\nsnowfall totals and comment on what you see there.\n:::\n\n:::{.solution}\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram( ~ Jan, data = SnowGR)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-37-1.png){width=432}\n:::\n:::\n\n36.6 inches is pretty high, but not the highest ever for a January.  Certainly well above average.\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(Feb ~ Jan, data = SnowGR)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](01-graphical_files/figure-html/unnamed-chunk-38-1.png){width=432}\n:::\n:::\n\nThere is no clear trend.  Somtime the snow keeps on coming, but a heavy snow\nJanuary could be followed by either a heavy or light snow February.\n:::\n",
    "supporting": [
      "01-graphical_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}